package hcdb.address.view;

import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import hcdb.address.hcdbApplication;
import hcdb.address.model.Card;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;

public class CardsOverviewController {

    @FXML
    private TableView<Card> cardTable;
    @FXML
    private TableColumn<Card, String> playerNameColumn;
    @FXML
    private TableColumn<Card, String> companyColumn;
    @FXML
    private TableColumn<Card, String> seriesColumn;
    @FXML
    private TableColumn<Card, Integer> seasonColumn;
    @FXML
    private TableColumn<Card, Integer> valueColumn;
    @FXML
    private TableColumn<Card, Boolean> rookieColumn;
    @FXML
    private TableColumn<Card, String> memorabiliaColumn;
    
    @FXML
    private Label playerNameLabel;
    @FXML
    private Label companyLabel;
    @FXML
    private Label seriesLabel;
    @FXML
    private Label seasonLabel;
    @FXML
    private Label valueLabel;
    @FXML
    private Label rookieLabel;
    @FXML
    private Label memorabiliaLabel;
    
    /**
     * Called when the user clicks on the delete button.
     */
    @FXML
    private void handleDeletePerson() {
        // Call Database with all info to delete from DB
    	// Database.deleteCard(...);
        int selectedIndex = cardTable.getSelectionModel().getSelectedIndex();
        if (selectedIndex >= 0) {
            cardTable.getItems().remove(selectedIndex);
        } else {
            // Nothing selected.
            Alert alert = new Alert(AlertType.WARNING);
            alert.initOwner(hcdbApp.getPrimaryStage());
            alert.setTitle("No Selection");
            alert.setHeaderText("No Card Selected");
            alert.setContentText("Please select a card in the table.");

            alert.showAndWait();
        }
    }
    
    // Reference to the main application.
    private hcdbApplication hcdbApp;

    /**
     * The constructor.
     * The constructor is called before the initialize() method.
     */
    public CardsOverviewController() {
    }

    /**
     * Initializes the controller class. This method is automatically called
     * after the fxml file has been loaded.
     */
    @FXML
    private void initialize() {
        // Initialize the person table with the two columns.
        playerNameColumn.setCellValueFactory(cellData -> cellData.getValue().playerNameProperty());
        companyColumn.setCellValueFactory(cellData -> cellData.getValue().companyProperty());
        seriesColumn.setCellValueFactory(cellData -> cellData.getValue().seriesProperty());
        seasonColumn.setCellValueFactory(cellData -> cellData.getValue().seasonProperty().asObject());
        valueColumn.setCellValueFactory(cellData -> cellData.getValue().valueProperty().asObject());
        rookieColumn.setCellValueFactory(cellData -> cellData.getValue().rookieProperty());
        memorabiliaColumn.setCellValueFactory(cellData -> cellData.getValue().memorabiliaProperty());
        
        showPersonDetails(null);

        // Listen for selection changes and show the person details when changed.
        cardTable.getSelectionModel().selectedItemProperty().addListener(
                (observable, oldValue, newValue) -> showPersonDetails(newValue));
    }

    /**
     * Is called by the main application to give a reference back to itself.
     * 
     * @param mainApp
     */
    public void setHcdbApp(hcdbApplication hcdbApp) {
        this.hcdbApp = hcdbApp;

        // Add observable list data to the table
        cardTable.setItems(hcdbApp.getCardData());
    }
    
    private void showPersonDetails(Card card) {
        if (card != null) {
            playerNameLabel.setText(card.getplayerName());
            companyLabel.setText(card.getCompany());
            seriesLabel.setText(card.getSeries());
            seasonLabel.setText(Integer.toString(card.getSeason()));
            valueLabel.setText(Integer.toString(card.getValue()));
            rookieLabel.setText(Boolean.toString(card.getRookie()));
            memorabiliaLabel.setText(card.getMemorabilia());
        } else {
            playerNameLabel.setText("");
            companyLabel.setText("");
            seriesLabel.setText("");
            seasonLabel.setText("");
            valueLabel.setText("");
            rookieLabel.setText("");
            memorabiliaLabel.setText("");
        }
    }
    
    
    /**
     * Called when the user clicks the new button. Opens a dialog to edit
     * details for a new person.
     */
    @FXML
    private void handleNewCard() {
        Card tempCard = new Card();
        boolean okClicked = hcdbApp.showCardEditDialog(tempCard);
        if (okClicked) {
            hcdbApp.getCardData().add(tempCard);
        }
    }

    /**
     * Called when the user clicks the edit button. Opens a dialog to edit
     * details for the selected person.
     */
    @FXML
    private void handleEditCard() {
        Card selectedCard = cardTable.getSelectionModel().getSelectedItem();
        if (selectedCard != null) {
            boolean okClicked = hcdbApp.showPersonEditDialog(selectedPerson);
            if (okClicked) {
                showPersonDetails(selectedPerson);
            }

        } else {
            // Nothing selected.
            Alert alert = new Alert(AlertType.WARNING);
            alert.initOwner(mainApp.getPrimaryStage());
            alert.setTitle("No Selection");
            alert.setHeaderText("No Person Selected");
            alert.setContentText("Please select a person in the table.");

            alert.showAndWait();
        }
    }
}