package hcdb.address.view;

import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import hcdb.address.hcdbApplication;
import hcdb.address.model.Card;

public class CardsOverviewController {

    @FXML
    private TableView<Card> cardTable;
    @FXML
    private TableColumn<Card, String> playerNameColumn;
    @FXML
    private TableColumn<Card, String> companyColumn;
    @FXML
    private TableColumn<Card, String> seriesColumn;
    @FXML
    private TableColumn<Card, Integer> seasonColumn;
    @FXML
    private TableColumn<Card, Integer> valueColumn;
    @FXML
    private TableColumn<Card, Boolean> rookieColumn;
    @FXML
    private TableColumn<Card, String> memorabiliaColumn;
    
    @FXML
    private Label playerNameLabel;
    @FXML
    private Label companyLabel;
    @FXML
    private Label seriesLabel;
    @FXML
    private Label seasonLabel;
    @FXML
    private Label valueLabel;
    @FXML
    private Label rookieLabel;
    @FXML
    private Label memorabiliaLabel;
    
    // Reference to the main application.
    private hcdbApplication hcdbApp;

    /**
     * The constructor.
     * The constructor is called before the initialize() method.
     */
    public CardsOverviewController() {
    }

    /**
     * Initializes the controller class. This method is automatically called
     * after the fxml file has been loaded.
     */
    @FXML
    private void initialize() {
        // Initialize the person table with the two columns.
        playerNameColumn.setCellValueFactory(cellData -> cellData.getValue().playerNameProperty());
        companyColumn.setCellValueFactory(cellData -> cellData.getValue().companyProperty());
        seriesColumn.setCellValueFactory(cellData -> cellData.getValue().seriesProperty());
        seasonColumn.setCellValueFactory(cellData -> cellData.getValue().seasonProperty().asObject());
        valueColumn.setCellValueFactory(cellData -> cellData.getValue().valueProperty().asObject());
        rookieColumn.setCellValueFactory(cellData -> cellData.getValue().rookieProperty());
        memorabiliaColumn.setCellValueFactory(cellData -> cellData.getValue().memorabiliaProperty());
    }

    /**
     * Is called by the main application to give a reference back to itself.
     * 
     * @param mainApp
     */
    public void setHcdbApp(hcdbApplication hcdbApp) {
        this.hcdbApp = hcdbApp;

        // Add observable list data to the table
        cardTable.setItems(hcdbApp.getCardData());
    }
    
    private void showPersonDetails(Card card) {
        if (card != null) {
            // Fill the labels with info from the person object.
            playerNameLabel.setText(card.getplayerName());
            lastNameLabel.setText(person.getLastName());
            streetLabel.setText(person.getStreet());
            postalCodeLabel.setText(Integer.toString(person.getPostalCode()));
            cityLabel.setText(person.getCity());

            // TODO: We need a way to convert the birthday into a String! 
            // birthdayLabel.setText(...);
        } else {
            // Person is null, remove all the text.
            firstNameLabel.setText("");
            lastNameLabel.setText("");
            streetLabel.setText("");
            postalCodeLabel.setText("");
            cityLabel.setText("");
            birthdayLabel.setText("");
        }
    }
}