package hcdb.address.view;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.TextField;
import javafx.scene.control.CheckBox;
import javafx.stage.Stage;
import hcdb.address.model.Card;



public class CardEditDialogController {

    @FXML
    private TextField playerNameField;
    @FXML
    private TextField companyField;
    @FXML
    private TextField seriesField;
    @FXML
    private TextField seasonField;
    @FXML
    private TextField valueField;
    @FXML
    private CheckBox rookieField;
    @FXML
    private CheckBox autographField;
    @FXML
    private CheckBox jerseyField;
    @FXML
    private CheckBox equipmentField;

    private Stage dialogStage;
    private Card card;
    private boolean okClicked = false;

    /**
     * Initializes the controller class. This method is automatically called
     * after the fxml file has been loaded.
     */
    @FXML
    private void initialize() {
    }

    /**
     * Sets the stage of this dialog.
     * 
     * @param dialogStage
     */
    public void setDialogStage(Stage dialogStage) {
        this.dialogStage = dialogStage;
    }

    /**
     * Sets the person to be edited in the dialog.
     * 
     * @param person
     */
    public void setCard(Card card) {
        this.card = card;

        playerNameField.setText(card.getplayerName());
        companyField.setText(card.getCompany());
        seriesField.setText(card.getSeries());
        seasonField.setText(Integer.toString(card.getSeason()));
        valueField.setText(Integer.toString(card.getValue()));
        rookieField.setSelected(card.getRookie());
    	String memorabilia = card.getMemorabilia();
    	autographField.setSelected(false);
    	jerseyField.setSelected(false);
    	equipmentField.setSelected(false);
    	if (memorabilia == "Autograph, Jersey, Equipment") {
        	autographField.setSelected(true);
        	jerseyField.setSelected(true);
        	equipmentField.setSelected(true);
    	}
    	else if (memorabilia == "Autograph, Jersey") {
    		autographField.setSelected(true);
        	jerseyField.setSelected(true);
    	}
    	else if (memorabilia == "Autograph, Equipment") {
    		autographField.setSelected(true);
        	equipmentField.setSelected(true);
		}
    	else if (memorabilia == "Jersey, Equipment") {
    		jerseyField.setSelected(true);
        	equipmentField.setSelected(true);
    	}
    	else if (memorabilia == "Autograph") {
    		autographField.setSelected(true);
    	}
    	else if (memorabilia == "Jersey") {
    		jerseyField.setSelected(true);
    	}
    	else if (memorabilia == "Equipment") {
    		equipmentField.setSelected(true);
    	}
    }

    /**
     * Returns true if the user clicked OK, false otherwise.
     * 
     * @return
     */
    public boolean isOkClicked() {
        return okClicked;
    }

    /**
     * Called when the user clicks ok.
     */
    @FXML
    private void handleOk() {
        if (isInputValid()) {
            card.setPlayerName(playerNameField.getText());
            card.setCompany(companyField.getText());
            card.setSeries(seriesField.getText());
            card.setSeason(Integer.parseInt(seasonField.getText()));
            card.setSeason(Integer.parseInt(valueField.getText()));
            

            okClicked = true;
            dialogStage.close();
        }
    }

    /**
     * Called when the user clicks cancel.
     */
    @FXML
    private void handleCancel() {
        dialogStage.close();
    }

    /**
     * Validates the user input in the text fields.
     * 
     * @return true if the input is valid
     */
    private boolean isInputValid() {
        String errorMessage = "";

        if (firstNameField.getText() == null || firstNameField.getText().length() == 0) {
            errorMessage += "No valid first name!\n"; 
        }
        if (lastNameField.getText() == null || lastNameField.getText().length() == 0) {
            errorMessage += "No valid last name!\n"; 
        }
        if (streetField.getText() == null || streetField.getText().length() == 0) {
            errorMessage += "No valid street!\n"; 
        }

        if (postalCodeField.getText() == null || postalCodeField.getText().length() == 0) {
            errorMessage += "No valid postal code!\n"; 
        } else {
            // try to parse the postal code into an int.
            try {
                Integer.parseInt(postalCodeField.getText());
            } catch (NumberFormatException e) {
                errorMessage += "No valid postal code (must be an integer)!\n"; 
            }
        }

        if (cityField.getText() == null || cityField.getText().length() == 0) {
            errorMessage += "No valid city!\n"; 
        }

        if (birthdayField.getText() == null || birthdayField.getText().length() == 0) {
            errorMessage += "No valid birthday!\n";
        } else {
            if (!DateUtil.validDate(birthdayField.getText())) {
                errorMessage += "No valid birthday. Use the format dd.mm.yyyy!\n";
            }
        }

        if (errorMessage.length() == 0) {
            return true;
        } else {
            // Show the error message.
            Alert alert = new Alert(AlertType.ERROR);
            alert.initOwner(dialogStage);
            alert.setTitle("Invalid Fields");
            alert.setHeaderText("Please correct invalid fields");
            alert.setContentText(errorMessage);

            alert.showAndWait();

            return false;
        }
    }
}